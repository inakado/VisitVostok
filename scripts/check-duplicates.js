import { PrismaClient } from '@prisma/client';
import { withAccelerate } from '@prisma/extension-accelerate';

const prisma = new PrismaClient().$extends(withAccelerate());

async function checkDuplicates() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    const totalPlaces = await prisma.place.count();
    console.log(`üìä –í—Å–µ–≥–æ –º–µ—Å—Ç –≤ –ë–î: ${totalPlaces}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    const duplicatesByCoords = await prisma.place.groupBy({
      by: ['lat', 'lng'],
      _count: {
        id: true
      },
      having: {
        id: {
          _count: {
            gt: 1
          }
        }
      }
    });
    
    console.log(`üö® –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${duplicatesByCoords.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for (let i = 0; i < Math.min(5, duplicatesByCoords.length); i++) {
      const group = duplicatesByCoords[i];
      console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã [${group.lat}, ${group.lng}]: ${group._count.id} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
      
      const places = await prisma.place.findMany({
        where: {
          lat: group.lat,
          lng: group.lng
        },
        select: {
          id: true,
          title: true,
          createdAt: true
        }
      });
      
      places.forEach(place => {
        console.log(`     - ${place.title} (${place.id}) - ${place.createdAt}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–¥—Ä–µ—Å—É
    const duplicatesByTitle = await prisma.place.groupBy({
      by: ['title', 'address'],
      _count: {
        id: true
      },
      having: {
        id: {
          _count: {
            gt: 1
          }
        }
      }
    });
    
    console.log(`üö® –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é+–∞–¥—Ä–µ—Å—É: ${duplicatesByTitle.length}`);
    
    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~381)
    const uniqueByCoords = await prisma.place.groupBy({
      by: ['lat', 'lng'],
      _count: {
        id: true
      }
    });
    
    console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${uniqueByCoords.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDuplicates(); 