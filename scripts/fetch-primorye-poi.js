import fetch from 'node-fetch';
import fs from 'fs/promises';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenTripMap API
 * 
 * API Documentation: https://opentripmap.io/docs
 * Rate Limits: 10 RPS for free tier
 * 
 * –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:
 * - /0.1/{lang}/places/bbox - –ø–æ–ª—É—á–µ–Ω–∏–µ POI –≤ bounding box
 * - /0.1/{lang}/places/xid/{xid} - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ POI
 */
class OpenTripMapClient {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.opentripmap.com';
    this.rateLimit = 110; // –º–∏–Ω–∏–º—É–º 110 –º—Å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (10 RPS)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async checkApiStatus() {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π bbox
      const url = `${this.baseUrl}/0.1/ru/places/bbox?lon_min=131&lat_min=43&lon_max=132&lat_max=44&limit=1&format=json&apikey=${this.apiKey}`;
      const response = await fetch(url);
      
      if (response.status === 401 || response.status === 403) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ APIKEY_OPENTRIPMAP –≤ .env —Ñ–∞–π–ª–µ');
      }
      
      if (response.status === 200) {
        console.log('‚úÖ API –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω');
        return true;
      }
      
      console.log('‚ö†Ô∏è  API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error.message);
      throw error;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
  async makeRequest(url, retries = 3) {
    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        console.log(`üì° –ó–∞–ø—Ä–æ—Å: ${url.replace(this.apiKey, '***')}`);
        const response = await fetch(url);
        
        if (response.status === 200) {
          const data = await response.json();
          return data;
        } else if (response.status === 429) {
          // Rate limit exceeded
          const waitTime = Math.pow(2, attempt) * 1000; // —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
          console.log(`‚ö†Ô∏è  Rate limit exceeded. –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await this.delay(waitTime);
          continue;
        } else if (response.status === 401 || response.status === 403) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á');
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        if (attempt === retries) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
          throw error;
        }
        
        const waitTime = Math.pow(2, attempt) * 1000;
        console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ ${waitTime}ms...`);
        await this.delay(waitTime);
      }
    }
  }

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ bbox –Ω–∞ —Å–µ—Ç–∫—É 1x1 –≥—Ä–∞–¥—É—Å
  createBboxGrid(bbox) {
    const grid = [];
    const gridSize = 1.0; // 1 –≥—Ä–∞–¥—É—Å
    
    for (let lat = bbox.lat_min; lat < bbox.lat_max; lat += gridSize) {
      for (let lon = bbox.lon_min; lon < bbox.lon_max; lon += gridSize) {
        grid.push({
          lon_min: lon,
          lat_min: lat,
          lon_max: Math.min(lon + gridSize, bbox.lon_max),
          lat_max: Math.min(lat + gridSize, bbox.lat_max)
        });
      }
    }
    
    console.log(`üìê –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞ –∏–∑ ${grid.length} —è—á–µ–µ–∫ (${gridSize}¬∞ x ${gridSize}¬∞)`);
    return grid;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ POI –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ bbox
  async getPOIsInCell(cellBbox, kinds = 'interesting_places', rate = 0) {
    const allPOIs = [];
    let offset = 0;
    const limit = 999; // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
    
    console.log(`üîç –ü–æ–∏—Å–∫ –≤ —è—á–µ–π–∫–µ: ${cellBbox.lon_min.toFixed(2)},${cellBbox.lat_min.toFixed(2)} ‚Üí ${cellBbox.lon_max.toFixed(2)},${cellBbox.lat_max.toFixed(2)}`);
    
    while (true) {
      const url = `${this.baseUrl}/0.1/ru/places/bbox?lon_min=${cellBbox.lon_min}&lat_min=${cellBbox.lat_min}&lon_max=${cellBbox.lon_max}&lat_max=${cellBbox.lat_max}&kinds=${kinds}&rate=${rate}&limit=${limit}&offset=${offset}&format=json&apikey=${this.apiKey}`;
      
      const data = await this.makeRequest(url);
      
      if (!data || !Array.isArray(data) || data.length === 0) {
        break;
      }
      
      allPOIs.push(...data);
      offset += limit;
      
      console.log(`   üìä +${data.length} POI (–≤—Å–µ–≥–æ –≤ —è—á–µ–π–∫–µ: ${allPOIs.length})`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(this.rateLimit);
      
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      if (data.length < limit) {
        break;
      }
    }
    
    return allPOIs;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ POI –≤–æ –≤—Å–µ–º —Ä–µ–≥–∏–æ–Ω–µ —á–µ—Ä–µ–∑ —Å–µ—Ç–∫—É
  async getPOIsInRegion(bbox, kinds = 'interesting_places', rate = 0) {
    const grid = this.createBboxGrid(bbox);
    const allPOIs = [];
    
    for (let i = 0; i < grid.length; i++) {
      const cell = grid[i];
      console.log(`\nüó∫Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ ${i + 1}/${grid.length}`);
      
      try {
        const cellPOIs = await this.getPOIsInCell(cell, kinds, rate);
        allPOIs.push(...cellPOIs);
        
        console.log(`‚úÖ –Ø—á–µ–π–∫–∞ ${i + 1}: ${cellPOIs.length} POI`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —è—á–µ–π–∫–µ ${i + 1}:`, error.message);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
      if (i < grid.length - 1) {
        await this.delay(this.rateLimit);
      }
    }
    
    return allPOIs;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ POI –ø–∞–∫–µ—Ç–∞–º–∏
  async getPOIDetails(pois) {
    const detailedPOIs = [];
    const batchSize = 10; // 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    console.log(`\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ${pois.length} POI...`);
    
    for (let i = 0; i < pois.length; i += batchSize) {
      const batch = pois.slice(i, i + batchSize);
      const batchPromises = batch.map(async (poi) => {
        if (!poi.xid) return null;
        
        const url = `${this.baseUrl}/0.1/ru/places/xid/${poi.xid}?format=json&apikey=${this.apiKey}`;
        try {
          return await this.makeRequest(url);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è ${poi.xid}:`, error.message);
          return null;
        }
      });
      
      const batchResults = await Promise.all(batchPromises);
      const validResults = batchResults.filter(result => result !== null);
      
      detailedPOIs.push(...validResults);
      
      const progress = Math.round(((i + batchSize) / pois.length) * 100);
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, pois.length)}/${pois.length} POI (${progress}%)`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
      if (i + batchSize < pois.length) {
        await this.delay(this.rateLimit);
      }
    }
    
    return detailedPOIs;
  }
}

async function main() {
  try {
    const apiKey = process.env.APIKEY_OPENTRIPMAP;
    
    if (!apiKey || apiKey === 'your_api_key_here') {
      console.error(`
‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:
1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://opentripmap.io/keys
2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
3. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: APIKEY_OPENTRIPMAP=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: scripts/README-primorye-poi.md
      `);
      process.exit(1);
    }

    console.log('üîë API –∫–ª—é—á:', apiKey);

    // ====== –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ò–°–ö–ê ======
    // Rate (—Ä–µ–π—Ç–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏):
    const rate = 0;
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ POI –¥–ª—è –ø–æ–∏—Å–∫–∞:
    const kinds = [
      'campsites'
      /*'natural', 
      '*/
    ].join(',');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const kindsShort = kinds.split(',').join('_');
    const outputFile = `POI_${kindsShort}.json`;
    // =============================

    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ POI –¥–ª—è –ü—Ä–∏–º–æ—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è...');
    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${kinds}`);
    console.log(`üéØ Rate: ${rate}`);
    console.log(`üìÑ –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${outputFile}`);
    console.log('üìê –ú–µ—Ç–æ–¥: —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ç–∫—É 1√ó1¬∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API');
    
    const client = new OpenTripMapClient(apiKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...');
    await client.checkApiStatus();
    
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bbox –¥–ª—è –ü—Ä–∏–º–æ—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è
    const bbox = {
      lon_min: 130.38,
      lat_min: 42.30,
      lon_max: 139.44,
      lat_max: 48.48
    };
    
    console.log('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π bbox –ü—Ä–∏–º–æ—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è:', bbox);
    console.log(`üìè –ü–ª–æ—â–∞–¥—å: ${(bbox.lon_max - bbox.lon_min) * (bbox.lat_max - bbox.lat_min)} –∫–≤.–≥—Ä–∞–¥—É—Å–æ–≤`);
    
    // 
    console.log('\nüó∫Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ POI —á–µ—Ä–µ–∑ —Å–µ—Ç–∫—É...');
    
    const pois = await client.getPOIsInRegion(bbox, kinds, rate);
    console.log(`\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${pois.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö POI`);
    
    if (pois.length === 0) {
      console.log('‚ö†Ô∏è  POI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å rate –Ω–∞ -3 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤.');
      console.log('   –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ OpenTripMap –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ xid
    const uniquePois = Array.from(
      new Map(pois.map(poi => [poi.xid, poi])).values()
    );
    
    console.log(`üîÑ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${uniquePois.length} POI`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ POI...');
    const detailedPOIs = await client.getPOIDetails(uniquePois);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${detailedPOIs.length} POI`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const result = {
      metadata: {
        region: '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π',
        bbox: bbox,
        grid_size: '1x1 –≥—Ä–∞–¥—É—Å',
        total_pois: detailedPOIs.length,
        rate_filter: rate,
        categories: kinds.split(','),
        generated_at: new Date().toISOString(),
        api_source: 'OpenTripMap',
        script_version: '2.0.0'
      },
      pois: detailedPOIs
    };
    
    await fs.writeFile(outputFile, JSON.stringify(result, null, 2), 'utf8');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª', outputFile);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const categories = {};
    detailedPOIs.forEach(poi => {
      if (poi.kinds) {
        poi.kinds.split(',').forEach(kind => {
          categories[kind] = (categories[kind] || 0) + 1;
        });
      }
    });
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(categories)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .forEach(([category, count]) => {
        console.log(`   ${category}: ${count}`);
      });
    
    console.log(`\nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFile}`);
    console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ POI: ${detailedPOIs.length}`);
    console.log(`üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π rate: ${rate}`);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
} 