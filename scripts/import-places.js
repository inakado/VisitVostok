import { PrismaClient } from '@prisma/client';
import { withAccelerate } from '@prisma/extension-accelerate';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient().$extends(withAccelerate());

async function importPlaces() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –º–µ—Å—Ç –∏–∑ –ü—Ä–∏–º–æ—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è...');
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const jsonPath = path.join(process.cwd(), 'public', 'primorsky_krai.json');
    const jsonData = fs.readFileSync(jsonPath, 'utf-8');
    const places = JSON.parse(jsonData);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${places.length} –º–µ—Å—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
    const existingPlaces = await prisma.place.findMany({
      select: {
        lat: true,
        lng: true,
        title: true
      }
    });
    
    const existingCoords = new Set(
      existingPlaces.map(p => `${p.lat},${p.lng}`)
    );
    
    console.log(`üìç –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${existingPlaces.length} –º–µ—Å—Ç`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞
    const newPlaces = places.filter(place => {
      const coordKey = `${place.location.lat},${place.location.lng}`;
      return !existingCoords.has(coordKey);
    });
    
    console.log(`‚ú® –ö –∏–º–ø–æ—Ä—Ç—É ${newPlaces.length} –Ω–æ–≤—ã—Ö –º–µ—Å—Ç`);
    
    if (newPlaces.length === 0) {
      console.log('‚úÖ –í—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
      return;
    }
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ 100
    const batchSize = 100;
    let imported = 0;
    
    for (let i = 0; i < newPlaces.length; i += batchSize) {
      const batch = newPlaces.slice(i, i + batchSize);
      
      const placesToCreate = batch.map(place => ({
        title: place.title,
        city: place.city,
        totalScore: place.totalScore,
        lat: place.location.lat,
        lng: place.location.lng,
        categoryName: place.categoryName || '–î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        street: place.street,
        state: place.state || '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π',
        reviewsCount: place.reviewsCount,
        imageUrl: place.imageUrl,
        price: place.price,
        address: place.address,
        categories: place.categories || [],
        temporarilyClosed: place.temporarilyClosed || false,
      }));
      
      await prisma.place.createMany({
        data: placesToCreate,
      });
      
      imported += batch.length;
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported}/${newPlaces.length} –Ω–æ–≤—ã—Ö –º–µ—Å—Ç`);
    }
    
    console.log('üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalPlaces = await prisma.place.count();
    
    const uniqueByCoords = await prisma.place.groupBy({
      by: ['lat', 'lng'],
      _count: { id: true }
    });
    
    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${totalPlaces}`);
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: ${uniqueByCoords.length}`);
    
    if (totalPlaces > uniqueByCoords.length) {
      console.log(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run clean-duplicates`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importPlaces(); 