import { PrismaClient } from '@prisma/client';
import { withAccelerate } from '@prisma/extension-accelerate';

const prisma = new PrismaClient().$extends(withAccelerate());

async function cleanDuplicates() {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    const duplicateGroups = await prisma.place.groupBy({
      by: ['lat', 'lng'],
      _count: {
        id: true
      },
      having: {
        id: {
          _count: {
            gt: 1
          }
        }
      }
    });
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    
    let totalDeleted = 0;
    
    for (const group of duplicateGroups) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Å—Ç–∞ —Å —ç—Ç–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      const places = await prisma.place.findMany({
        where: {
          lat: group.lat,
          lng: group.lng
        },
        orderBy: {
          createdAt: 'asc' // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ
        }
      });
      
      if (places.length > 1) {
        // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ (—Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ), —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        const toDelete = places.slice(1);
        const placesToDeleteIds = toDelete.map(p => p.id);
        
        console.log(`üìç [${group.lat}, ${group.lng}] "${places[0].title}": —É–¥–∞–ª—è—é ${toDelete.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        await prisma.place.deleteMany({
          where: {
            id: {
              in: placesToDeleteIds
            }
          }
        });
        
        totalDeleted += toDelete.length;
      }
    }
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${totalDeleted} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalCount = await prisma.place.count();
    const uniqueByCoords = await prisma.place.groupBy({
      by: ['lat', 'lng'],
      _count: { id: true }
    });
    
    console.log(`\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${finalCount}`);
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç: ${uniqueByCoords.length}`);
    
    if (finalCount === uniqueByCoords.length) {
      console.log('üéâ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!');
    } else {
      console.log('‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanDuplicates(); 