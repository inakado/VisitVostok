/**
 * –•—É–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ offline —Ä–µ–∂–∏–º–∞ –∏ graceful degradation
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ç—å—é
 */

import { useState, useEffect, useCallback, useMemo } from 'react'
import { useToastHelpers } from './useToastHelpers'

// === –¢–ò–ü–´ ===

interface OfflineData<T> {
	data: T
	timestamp: number
	version: number
}

interface OfflineConfig {
	storageKey: string
	maxAge: number // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	enableBackgroundSync: boolean // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
}

interface UseOfflineSupportOptions<T> {
	config?: Partial<OfflineConfig>
	fallbackData?: T
	onOnline?: () => void
	onOffline?: () => void
	onDataStale?: (data: T, ageMs: number) => void
}

interface OfflineSupportReturn<T> {
	isOnline: boolean
	isOffline: boolean
	storeData: (data: T) => void
	getStoredData: () => T | null
	clearStoredData: () => void
	getDataAge: () => number | null
	isDataStale: () => boolean
	connectionQuality: 'good' | 'poor' | 'offline'
}

// === –û–°–ù–û–í–ù–û–ô –•–£–ö ===

export function useOfflineSupport<T>(
	options: UseOfflineSupportOptions<T> = {}
): OfflineSupportReturn<T> {
	const [isOnline, setIsOnline] = useState(navigator.onLine)
	const [connectionQuality, setConnectionQuality] = useState<'good' | 'poor' | 'offline'>('good')
	const toastHelpers = useToastHelpers()

	// –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	const config: OfflineConfig = useMemo(() => ({
		storageKey: 'offline_data',
		maxAge: 24 * 60 * 60 * 1000, // 24 —á–∞—Å–∞
		enableBackgroundSync: true,
		...options.config
	}), [options.config])

	// === –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–¢–ò ===

	useEffect(() => {
		const handleOnline = () => {
			setIsOnline(true)
			setConnectionQuality('good')
			options.onOnline?.()
			
			if (config.enableBackgroundSync) {
				// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
				console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...')
			}
		}

		const handleOffline = () => {
			setIsOnline(false)
			setConnectionQuality('offline')
			options.onOffline?.()
			toastHelpers.offlineNotice()
		}

		// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
		window.addEventListener('online', handleOnline)
		window.addEventListener('offline', handleOffline)

		// === –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ /api/health ===
		/*
		const checkConnectionQuality = async () => {
			if (!navigator.onLine) {
				setConnectionQuality('offline')
				return
			}

			try {
				// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
				const start = Date.now()
				const response = await fetch('/api/health', { 
					method: 'HEAD',
					cache: 'no-cache'
				})
				const end = Date.now()
				
				if (response.ok) {
					const latency = end - start
					setConnectionQuality(latency > 2000 ? 'poor' : 'good')
				} else {
					setConnectionQuality('poor')
				}
			} catch {
				setConnectionQuality('poor')
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
		const qualityInterval = setInterval(checkConnectionQuality, 30000)
		// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
		checkConnectionQuality()
		*/

		return () => {
			window.removeEventListener('online', handleOnline)
			window.removeEventListener('offline', handleOffline)
			// clearInterval(qualityInterval)
		}
	}, [config.enableBackgroundSync, options, toastHelpers])

	// === –†–ê–ë–û–¢–ê –° –õ–û–ö–ê–õ–¨–ù–´–ú –•–†–ê–ù–ò–õ–ò–©–ï–ú ===

	const storeData = useCallback((data: T) => {
		if (typeof window === 'undefined') return

		try {
			const offlineData: OfflineData<T> = {
				data,
				timestamp: Date.now(),
				version: 1
			}

			localStorage.setItem(config.storageKey, JSON.stringify(offlineData))
		} catch (error) {
			console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è offline —Ä–µ–∂–∏–º–∞:', error)
		}
	}, [config.storageKey])

	const getStoredData = useCallback((): T | null => {
		if (typeof window === 'undefined') return null

		try {
			const stored = localStorage.getItem(config.storageKey)
			if (!stored) return options.fallbackData || null

			const offlineData: OfflineData<T> = JSON.parse(stored)
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –¥–∞–Ω–Ω—ã—Ö
			const age = Date.now() - offlineData.timestamp
			if (age > config.maxAge) {
				// –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏
				if (options.onDataStale) {
					options.onDataStale(offlineData.data, age)
				}
				return options.fallbackData || null
			}

			return offlineData.data
		} catch (error) {
			console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å offline –¥–∞–Ω–Ω—ã–µ:', error)
			return options.fallbackData || null
		}
	}, [config.storageKey, config.maxAge, options])

	const clearStoredData = useCallback(() => {
		if (typeof window === 'undefined') return

		try {
			localStorage.removeItem(config.storageKey)
		} catch (error) {
			console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å offline –¥–∞–Ω–Ω—ã–µ:', error)
		}
	}, [config.storageKey])

	const getDataAge = useCallback((): number | null => {
		if (typeof window === 'undefined') return null

		try {
			const stored = localStorage.getItem(config.storageKey)
			if (!stored) return null

			const offlineData: OfflineData<T> = JSON.parse(stored)
			return Date.now() - offlineData.timestamp
		} catch {
			return null
		}
	}, [config.storageKey])

	const isDataStale = useCallback((): boolean => {
		const age = getDataAge()
		return age !== null && age > config.maxAge
	}, [getDataAge, config.maxAge])

	return useMemo(() => ({
		isOnline,
		isOffline: !isOnline,
		storeData,
		getStoredData,
		clearStoredData,
		getDataAge,
		isDataStale,
		connectionQuality
	}), [isOnline, storeData, getStoredData, clearStoredData, getDataAge, isDataStale, connectionQuality])
}

// === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –•–£–ö–ò ===

/**
 * –•—É–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö —Å fallback –Ω–∞ offline –≤–µ—Ä—Å–∏—é
 */
export function useOfflineApiData<T>(
	apiFunction: () => Promise<T>,
	cacheKey: string,
	options: UseOfflineSupportOptions<T> = {}
) {
	const [data, setData] = useState<T | null>(null)
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState<string | null>(null)
	
	const offline = useOfflineSupport<T>({
		...options,
		config: { storageKey: `api_cache_${cacheKey}`, ...options.config }
	})

	const loadData = useCallback(async (useCache = false) => {
		if (useCache || offline.isOffline) {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
			const cachedData = offline.getStoredData()
			if (cachedData) {
				setData(cachedData)
				setLoading(false)
				
				if (offline.isDataStale()) {
					setError('–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ (offline —Ä–µ–∂–∏–º)')
				} else {
					setError(null)
				}
				return
			}
		}

		if (offline.isOffline) {
			setError('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
			setLoading(false)
			return
		}

		try {
			setLoading(true)
			setError(null)
			
			const result = await apiFunction()
			setData(result)
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è offline –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
			offline.storeData(result)
		} catch (err) {
			const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
			setError(errorMessage)
			
			// –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
			const cachedData = offline.getStoredData()
			if (cachedData) {
				setData(cachedData)
				setError(`${errorMessage} (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)`)
			}
		} finally {
			setLoading(false)
		}
	}, [apiFunction, offline])

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
	useEffect(() => {
		loadData()
	}, [loadData])

	// –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	useEffect(() => {
		if (offline.isOnline && offline.connectionQuality === 'good') {
			loadData()
		}
	}, [offline.isOnline, offline.connectionQuality, loadData])

	return {
		data,
		loading,
		error,
		refetch: () => loadData(false),
		...offline
	}
}

/**
 * –•—É–∫ –¥–ª—è offline-ready —Ñ–æ—Ä–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
 */
export function useOfflineForm<T extends Record<string, unknown>>(
	initialData: T,
	submitFunction: (data: T) => Promise<void>,
	options: { autoSave?: boolean; saveKey?: string } = {}
) {
	const [formData, setFormData] = useState<T>(initialData)
	const [pendingSubmissions, setPendingSubmissions] = useState<T[]>([])
	
	const offline = useOfflineSupport<T>({
		config: { storageKey: options.saveKey || 'form_draft' }
	})

	// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
	useEffect(() => {
		if (options.autoSave) {
			const timeoutId = setTimeout(() => {
				offline.storeData(formData)
			}, 1000) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

			return () => clearTimeout(timeoutId)
		}
	}, [formData, options.autoSave, offline])

	// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		const savedDraft = offline.getStoredData()
		if (savedDraft) {
			setFormData({ ...initialData, ...savedDraft })
		}
	}, [initialData, offline])

	const handleSubmit = useCallback(async () => {
		if (offline.isOffline) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
			setPendingSubmissions(prev => [...prev, formData])
			return Promise.resolve()
		}

		try {
			await submitFunction(formData)
			offline.clearStoredData() // –û—á–∏—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
		} catch (error) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
			setPendingSubmissions(prev => [...prev, formData])
			throw error
		}
	}, [formData, offline, submitFunction])

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
	useEffect(() => {
		if (offline.isOnline && pendingSubmissions.length > 0) {
			Promise.all(
				pendingSubmissions.map(data => submitFunction(data))
			).then(() => {
				setPendingSubmissions([])
			}).catch(error => {
				console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º:', error)
			})
		}
	}, [offline.isOnline, pendingSubmissions, submitFunction])

	return {
		formData,
		setFormData,
		handleSubmit,
		pendingSubmissions: pendingSubmissions.length,
		...offline
	}
} 