import maplibregl from 'maplibre-gl'

export interface IconInfo {
  fileName: string
  path: string
  categoryName: string
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ MapLibre
 */
export async function loadMapIcon(
  map: maplibregl.Map,
  iconId: string,
  iconPath: string
): Promise<boolean> {
  return new Promise((resolve) => {
    if (map.hasImage(iconId)) {
      resolve(true)
      return
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å SVG
    const img = new Image()
    img.crossOrigin = 'anonymous'
    
    img.onload = () => {
      try {
        if (!map.hasImage(iconId)) {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ canvas –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          const canvas = document.createElement('canvas')
          canvas.width = 32
          canvas.height = 32
          const ctx = canvas.getContext('2d')
          
          if (ctx) {
            ctx.drawImage(img, 0, 0, 32, 32)
            const imageData = ctx.getImageData(0, 0, 32, 32)
            
            // MapLibre —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å —è–≤–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            const mapLibreImageData = {
              width: 32,
              height: 32,
              data: imageData.data
            }
            
            map.addImage(iconId, mapLibreImageData, { sdf: false })
            console.log(`‚úÖ –ò–∫–æ–Ω–∫–∞ ${iconId} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ canvas`)
            resolve(true)
          } else {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è canvas –¥–ª—è ${iconId}`)
            resolve(false)
          }
        } else {
          resolve(true)
        }
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ ${iconId}:`, err)
        resolve(false)
      }
    }
    
    img.onerror = (error) => {
      console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏ ${iconId}:`, error)
      resolve(false)
    }
    
    img.src = iconPath
  })
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export async function loadAllCategoryIcons(
  map: maplibregl.Map,
  categoryMapping: Record<string, { fileName: string; path: string }>
): Promise<void> {
  const loadPromises: Promise<boolean>[] = []

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Object.entries(categoryMapping).forEach(([categoryName, iconInfo]) => {
    const iconId = `category-${categoryName.replace(/\s+/g, '-').toLowerCase()}`
    loadPromises.push(loadMapIcon(map, iconId, iconInfo.path))
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –∏–∫–æ–Ω–∫—É
  loadPromises.push(loadMapIcon(map, 'category-fallback', '/pin-icons-vv/other.svg'))

  try {
    const results = await Promise.allSettled(loadPromises)
    const successes = results.filter(result => result.status === 'fulfilled' && result.value).length
    const failures = results.filter(result => result.status === 'rejected' || (result.status === 'fulfilled' && !result.value)).length
    
    console.log(`‚úÖ –ò–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${successes} —É—Å–ø–µ—à–Ω–æ, ${failures} –æ—à–∏–±–æ–∫`)
    
    if (failures > 0) {
      console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∫–æ–Ω–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ fallback –∏–∫–æ–Ω–∫–∞')
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫:', error)
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç ID –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export function getCategoryIconId(categoryName: string): string {
  if (!categoryName) return 'category-fallback'
  return `category-${categoryName.replace(/\s+/g, '-').toLowerCase()}`
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∏–∫–æ–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export function isCategoryIconLoaded(map: maplibregl.Map, categoryName: string): boolean {
  const iconId = getCategoryIconId(categoryName)
  return map.hasImage(iconId) || map.hasImage('category-fallback')
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export function getCategoryIconExpression(
  categoryMapping: Record<string, { fileName: string; path: string }>
): (string | unknown[])[] | string {
  if (Object.keys(categoryMapping).length === 0) {
    console.log('‚ö†Ô∏è categoryMapping –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback')
    return 'category-fallback'
  }

  const cases: (string | unknown[])[] = ['case']
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Object.keys(categoryMapping).forEach(categoryName => {
    const iconId = getCategoryIconId(categoryName)
    cases.push(['==', ['get', 'categoryName'], categoryName])
    cases.push(iconId)
    console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω case: ${categoryName} -> ${iconId}`)
  })
  
  // Fallback –∏–∫–æ–Ω–∫–∞
  cases.push('category-fallback')
  
  console.log('üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ expression:', cases)
  return cases
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é fallback –∏–∫–æ–Ω–∫—É –≤ –≤–∏–¥–µ –∫—Ä—É–≥–∞
 */
export async function loadFallbackIcon(map: maplibregl.Map): Promise<boolean> {
  const iconId = 'category-fallback'
  
  if (map.hasImage(iconId)) {
    return true
  }

  return new Promise((resolve) => {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –≤ –≤–∏–¥–µ —Å–∏–Ω–µ–≥–æ –∫—Ä—É–≥–∞ –Ω–∞ canvas
    const canvas = document.createElement('canvas')
    canvas.width = 32
    canvas.height = 32
    const ctx = canvas.getContext('2d')
    
    if (ctx) {
      // –†–∏—Å—É–µ–º —Å–∏–Ω–∏–π –∫—Ä—É–≥ –∫–∞–∫ fallback –∏–∫–æ–Ω–∫—É
      ctx.fillStyle = '#6366F1'
      ctx.beginPath()
      ctx.arc(16, 16, 12, 0, 2 * Math.PI)
      ctx.fill()
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–ª—É—é –æ–±–≤–æ–¥–∫—É
      ctx.strokeStyle = '#FFFFFF'
      ctx.lineWidth = 2
      ctx.stroke()
      
      const imageData = ctx.getImageData(0, 0, 32, 32)
      
      const mapLibreImageData = {
        width: 32,
        height: 32,
        data: imageData.data
      }
      
      try {
        map.addImage(iconId, mapLibreImageData, { sdf: false })
        console.log('‚úÖ Fallback –∏–∫–æ–Ω–∫–∞ (—Å–∏–Ω–∏–π –∫—Ä—É–≥) –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
        resolve(true)
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è fallback –∏–∫–æ–Ω–∫–∏:', err)
        resolve(false)
      }
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas –¥–ª—è fallback –∏–∫–æ–Ω–∫–∏')
      resolve(false)
    }
  })
} 