"use client";

import { useEffect, useRef, useState, useCallback } from "react";
import maplibregl from "maplibre-gl";
import "maplibre-gl/dist/maplibre-gl.css";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MapLibre Inspector —Ç–æ–ª—å–∫–æ –¥–ª—è development
import "@maplibre/maplibre-gl-inspect/dist/maplibre-gl-inspect.css";
import MaplibreInspect from "@maplibre/maplibre-gl-inspect";
import { Protocol, PMTiles } from "pmtiles";
import type { FeatureCollection, Point } from "geojson";
import { Place } from "@prisma/client";
import { 
  loadAllCategoryIcons, 
  getCategoryIconExpression,
  getCategoryIconId,
  loadMapIcon,
  loadFallbackIcon
} from "@/lib/utils/map-icons";

interface Props {
  places: Place[];
  onPlaceSelect: (place: Place | null) => void;
}

// –ö–ª—é—á–∏ –¥–ª—è localStorage
const MAP_STATE_KEY = 'visitvostok_map_state';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞
function debugPlaceData(place: Place | Record<string, unknown>, context: string) {
  console.log(`üîç [${context}] –î–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:`, {
    id: place?.id,
    title: place?.title,
    lat: place?.lat,
    lng: place?.lng,
    categoryName: place?.categoryName,
    hasValidId: !!place?.id,
    hasValidTitle: !!place?.title,
    hasValidCoords: typeof place?.lat === 'number' && typeof place?.lng === 'number' &&
                   !isNaN(place.lat as number) && !isNaN(place.lng as number) &&
                   (place.lat as number) >= -90 && (place.lat as number) <= 90 &&
                   (place.lng as number) >= -180 && (place.lng as number) <= 180
  });
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
function saveMapState(center: [number, number], zoom: number) {
  if (typeof window === 'undefined') return;
  
  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  if (!center || center.length !== 2 || 
      isNaN(center[0]) || isNaN(center[1]) ||
      center[0] < -180 || center[0] > 180 ||
      center[1] < -90 || center[1] > 90 ||
      isNaN(zoom) || zoom < 0 || zoom > 24) {
    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã:', { center, zoom });
    return;
  }
  
  const mapState = {
    center,
    zoom,
    timestamp: Date.now()
  };
  
  try {
    localStorage.setItem(MAP_STATE_KEY, JSON.stringify(mapState));
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã
function loadMapState(): { center: [number, number]; zoom: number } | null {
  if (typeof window === 'undefined') return null;
  
  try {
    const saved = localStorage.getItem(MAP_STATE_KEY);
    if (!saved) return null;
    
    const mapState = JSON.parse(saved);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    if (Date.now() - mapState.timestamp > maxAge) {
      localStorage.removeItem(MAP_STATE_KEY);
      return null;
    }
    
    return {
      center: mapState.center,
      zoom: mapState.zoom
    };
  } catch {
    return null;
  }
}

function placesToGeoJSON(places: Place[]): FeatureCollection<Point> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!Array.isArray(places)) {
    console.warn('‚ö†Ô∏è placesToGeoJSON: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ places');
    return {
      type: "FeatureCollection",
      features: []
    };
  }

  console.log('üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º places –≤ GeoJSON:', places.length);
  let invalidPlaces = 0;

  const validFeatures = places
    .filter((place) => {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ —É –º–µ—Å—Ç–∞ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hasValidCoords = typeof place.lat === "number" && typeof place.lng === "number" 
        && !isNaN(place.lat) && !isNaN(place.lng)
        && place.lat >= -90 && place.lat <= 90 
        && place.lng >= -180 && place.lng <= 180;
      const hasId = place.id;
      const hasTitle = place.title;
      
      if (!hasValidCoords || !hasId || !hasTitle) {
        invalidPlaces++;
        if (invalidPlaces <= 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
          console.warn('‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω—è–µ–º –º–µ—Å—Ç–æ:', {
            id: place.id,
            title: place.title,
            lat: place.lat,
            lng: place.lng,
            hasValidCoords,
            hasId,
            hasTitle
          });
        }
        return false;
      }
      
      return true;
    })
    .map((place) => {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–Ω—ã–µ properties –±–µ–∑ null –∑–Ω–∞—á–µ–Ω–∏–π
      const cleanProperties: Record<string, unknown> = {};
      
      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ properties –∏ –∑–∞–º–µ–Ω—è–µ–º null –Ω–∞ safe –∑–Ω–∞—á–µ–Ω–∏—è
      Object.entries(place).forEach(([key, value]) => {
        if (value === null || value === undefined) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–ª—é—á—É –∏ —Å—Ç–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          switch (key) {
            case 'totalScore':
            case 'reviewsCount':
            case 'lat':
            case 'lng':
              cleanProperties[key] = 0;
              break;
            case 'temporarilyClosed':
              cleanProperties[key] = false;
              break;
            case 'categories':
              cleanProperties[key] = [];
              break;
            default:
              cleanProperties[key] = '';
          }
        } else {
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
          if ((key === 'totalScore' || key === 'reviewsCount' || key === 'lat' || key === 'lng') && 
              (typeof value !== 'number' || isNaN(value as number))) {
            cleanProperties[key] = 0;
          } else {
            cleanProperties[key] = value;
          }
        }
      });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è —á–∏—Å–ª–æ–≤—ã–µ
      ['totalScore', 'reviewsCount', 'lat', 'lng'].forEach(numField => {
        if (typeof cleanProperties[numField] !== 'number' || isNaN(cleanProperties[numField])) {
          cleanProperties[numField] = 0;
        }
      });
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ categoryName
      if (!cleanProperties.categoryName || cleanProperties.categoryName === '') {
        cleanProperties.categoryName = '–ü—Ä–æ—á–µ–µ';
      }

      return {
        type: "Feature" as const,
        geometry: {
          type: "Point" as const,
          coordinates: [place.lng, place.lat] as [number, number],
        },
        properties: cleanProperties,
      };
    });

  if (invalidPlaces > 0) {
    console.warn(`‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ${invalidPlaces} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –º–µ—Å—Ç –∏–∑ ${places.length}`);
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${validFeatures.length} –≤–∞–ª–∏–¥–Ω—ã—Ö features –¥–ª—è –∫–∞—Ä—Ç—ã`);

  return {
    type: "FeatureCollection",
    features: validFeatures,
  };
}

export default function MapLibreMap({ places, onPlaceSelect }: Props) {
  const mapRef = useRef<HTMLDivElement | null>(null);
  const mapInstanceRef = useRef<maplibregl.Map | null>(null);
  const [mapReady, setMapReady] = useState(false);
  const filterTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const sourceUpdateTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [isFirstRender, setIsFirstRender] = useState(true);
  const [categoryMapping, setCategoryMapping] = useState<Record<string, { fileName: string; path: string }>>({});
  const [iconsLoaded, setIconsLoaded] = useState(false);

  // –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ styleimagemissing –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω–∏—è
  const handleStyleImageMissing = useCallback(async (e: { id: string }) => {
    const id = e.id;
    const map = mapInstanceRef.current;
    if (!map) return;

    console.log('üîç –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∏–∫–æ–Ω–∫–∞:', id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (id.startsWith('category-')) {
      if (id === 'category-fallback') {
        console.log('üé® –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –∏–∫–æ–Ω–∫—É —á–µ—Ä–µ–∑ styleimagemissing');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –∏–∫–æ–Ω–∫—É –∫–∞–∫ –æ—Ä–∞–Ω–∂–µ–≤—ã–π –∫—Ä—É–≥
        try {
          await loadFallbackIcon(map);
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –∏–∫–æ–Ω–∫–∏:", err);
        }
      } else {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë –∏–∫–æ–Ω–∫—É
        const categoryName = Object.keys(categoryMapping).find(name => 
          getCategoryIconId(name) === id
        );
        
        if (categoryName && categoryMapping[categoryName]) {
          const iconPath = categoryMapping[categoryName].path;
          console.log(`üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–∫–æ–Ω–∫—É ${id} –∏–∑ ${iconPath}`);
          try {
            await loadMapIcon(map, id, iconPath);
          } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${id}:`, err);
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º fallback
            await loadFallbackIcon(map);
          }
        } else {
          console.log(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º fallback`);
          // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º fallback
          try {
            await loadFallbackIcon(map);
          } catch (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –∏–∫–æ–Ω–∫–∏ –¥–ª—è ${id}:`, err);
          }
        }
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∫–æ–Ω–æ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    else {
      console.log(`‚ö†Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞ ${id}, –∑–∞–≥—Ä—É–∂–∞–µ–º fallback`);
      try {
        await loadFallbackIcon(map);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∏–∫–æ–Ω–∫–∏ ${id}:`, err);
      }
    }
  }, [categoryMapping]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadCategoryMapping = async () => {
      try {
        const response = await fetch('/api/categories/mapping');
        if (response.ok) {
          const mapping = await response.json();
          setCategoryMapping(mapping);
          console.log('‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω:', mapping);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      }
    };

    loadCategoryMapping();
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∫–æ–≥–¥–∞ –º–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∏ –∫–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
  useEffect(() => {
    const loadIcons = async () => {
      const map = mapInstanceRef.current;
      if (!map || !mapReady || Object.keys(categoryMapping).length === 0 || iconsLoaded) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∫–æ–Ω–æ–∫:', {
          mapExists: !!map,
          mapReady,
          categoryMappingCount: Object.keys(categoryMapping).length,
          iconsLoaded
        });
        return;
      }

      console.log('üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã...');
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if (!map.hasImage('category-fallback')) {
          await loadFallbackIcon(map);
        }
        
        await loadAllCategoryIcons(map, categoryMapping);
        setIconsLoaded(true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π —Å –∏–∫–æ–Ω–∫–∞–º–∏ –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (map.getLayer("unclustered-point")) {
          const newExpression = getCategoryIconExpression(categoryMapping);
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π —Å –Ω–æ–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏, expression:', newExpression);
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          map.setLayoutProperty("unclustered-point", "icon-image", newExpression as any);
          console.log('‚úÖ –°–ª–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫:', error);
      }
    };

    loadIcons();
  }, [categoryMapping, mapReady, iconsLoaded]); // categoryMapping –∏ iconsLoaded –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPU –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (filterTimeoutRef.current) {
      clearTimeout(filterTimeoutRef.current);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    filterTimeoutRef.current = setTimeout(() => {
      const map = mapInstanceRef.current;
      if (!map || !mapReady) {
        console.log('‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã:', { 
          mapExists: !!map, 
          mapReady, 
        });
        return;
      }

      // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–µ—Ä—Ü–∞–Ω–∏—è
      if (isFirstRender) {
        console.log('üé¨ –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é');
        setIsFirstRender(false);
        return;
      }

      console.log('üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é:', {
        filteredPlaces: places.length
      });

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–æ–µ–≤!
      // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
      // - clusters: ["has", "point_count"] - —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Ç–µ—Ä—ã  
      // - unclustered-point: ["!", ["has", "point_count"]] - —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞
      // - cluster-count: ["has", "point_count"] - —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
      
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–æ–µ–≤');
    }, isFirstRender ? 0 : 50); // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏, –ø–æ—Ç–æ–º 50ms
    
    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      if (filterTimeoutRef.current) {
        clearTimeout(filterTimeoutRef.current);
      }
    };
  }, [places, mapReady, isFirstRender]); // places, mapReady –∏ isFirstRender –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ places
  useEffect(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (sourceUpdateTimeoutRef.current) {
      clearTimeout(sourceUpdateTimeoutRef.current);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
    sourceUpdateTimeoutRef.current = setTimeout(() => {
      const map = mapInstanceRef.current;
      if (!map || !mapReady) {
        console.log('‚è≥ –ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        return;
      }
      
      try {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞
        if (!map.isStyleLoaded || !map.isStyleLoaded()) {
          console.log('‚è≥ –°—Ç–∏–ª—å –∫–∞—Ä—Ç—ã –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
          return;
        }
        
        const source = map.getSource("places") as maplibregl.GeoJSONSource;
        if (source && source.setData) {
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞—Ä—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', places.length, '–º–µ—Å—Ç');
          const geoJsonData = placesToGeoJSON(places);
          source.setData(geoJsonData);
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π –∏–∫–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
          setTimeout(() => {
            const currentMap = mapInstanceRef.current;
            if (currentMap && currentMap.isStyleLoaded && currentMap.isStyleLoaded() && currentMap.getLayer && currentMap.getLayer("unclustered-point") && iconsLoaded && Object.keys(categoryMapping).length > 0) {
              console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π unclustered-point —Å –∏–∫–æ–Ω–∫–∞–º–∏');
              try {
                // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ–π
                currentMap.setLayoutProperty("unclustered-point", "visibility", "none");
                
                // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º expression
                setTimeout(() => {
                  const finalMap = mapInstanceRef.current;
                  if (finalMap && finalMap.isStyleLoaded && finalMap.isStyleLoaded() && finalMap.getLayer && finalMap.getLayer("unclustered-point")) {
                    const currentExpression = getCategoryIconExpression(categoryMapping);
                    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º expression –Ω–∞:', currentExpression);
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    finalMap.setLayoutProperty("unclustered-point", "icon-image", currentExpression as any);
                    finalMap.setLayoutProperty("unclustered-point", "visibility", "visible");
                    console.log('‚úÖ –°–ª–æ–π unclustered-point –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–∫–∞–∑–∞–Ω');
                  }
                }, 100);
              } catch (updateError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–æ—è:', updateError);
              }
            } else {
              console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è: –∫–∞—Ä—Ç–∞, —Å–ª–æ–π –∏–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã');
            }
          }, 200);
        } else {
          console.log('‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–∞—Ä—Ç—ã:', error);
      }
    }, 50); // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    
    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      if (sourceUpdateTimeoutRef.current) {
        clearTimeout(sourceUpdateTimeoutRef.current);
      }
    };
  }, [mapReady, places, categoryMapping, iconsLoaded]); // –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –ò —Å–∞–º–∏ places

  useEffect(() => {
    if (!mapRef.current) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    const container = mapRef.current;
    if (container.clientWidth === 0 || container.clientHeight === 0) {
      console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
      const retryTimeout = setTimeout(() => {
        if (container.clientWidth > 0 && container.clientHeight > 0) {
          // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç
          container.dispatchEvent(new Event('resize'));
        }
      }, 100);
      return () => clearTimeout(retryTimeout);
    }

    // PMTiles protocol
    const protocol = new Protocol();
    maplibregl.addProtocol("pmtiles", protocol.tile.bind(protocol));
    const pm = new PMTiles("https://s3.ru1.storage.beget.cloud/b8118b5036f9-vv-map/pm-tiles-area/my_area.pmtiles");
    protocol.add(pm);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
    const savedState = loadMapState();
    const defaultCenter: [number, number] = [135.0, 48.5];
    const defaultZoom = 4;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const validCenter = savedState?.center && 
      !isNaN(savedState.center[0]) && 
      !isNaN(savedState.center[1]) && 
      savedState.center[0] >= -180 && 
      savedState.center[0] <= 180 && 
      savedState.center[1] >= -90 && 
      savedState.center[1] <= 90 
      ? savedState.center 
      : defaultCenter;
    
    const validZoom = savedState?.zoom && 
      !isNaN(savedState.zoom) && 
      savedState.zoom >= 4 && 
      savedState.zoom <= 18 
      ? savedState.zoom 
      : defaultZoom;

    // Init map
    const map = new maplibregl.Map({
      container: mapRef.current,
      style: "style.json",
      center: validCenter,
      zoom: validZoom,
      minZoom: 4,
      maxZoom: 18,
    });
    mapInstanceRef.current = map;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ –∏–ª–∏ –∑—É–º–∞
    const saveCurrentState = () => {
      try {
        const center = map.getCenter();
        const zoom = map.getZoom();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!center || isNaN(center.lng) || isNaN(center.lat) || isNaN(zoom)) {
          console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', { center, zoom });
          return;
        }
        
        saveMapState([center.lng, center.lat], zoom);
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
      }
    };

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (—Å –¥–µ–±–∞—É–Ω—Å–æ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    let saveTimeout: NodeJS.Timeout;
    const debouncedSave = () => {
      clearTimeout(saveTimeout);
      saveTimeout = setTimeout(saveCurrentState, 1000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    };

    map.on('moveend', debouncedSave);
    map.on('zoomend', debouncedSave);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    map.on("styleimagemissing", handleStyleImageMissing);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–∞—Ä—Ç—ã
    map.on('error', (e) => {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã:', e.error);
    });

    map.on("load", async () => {
      console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
      
      // –®–ê–ì 1: –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º fallback –∏–∫–æ–Ω–∫—É –ø–µ—Ä–≤–æ–π
      console.log('üé® –ó–∞–≥—Ä—É–∂–∞–µ–º fallback –∏–∫–æ–Ω–∫—É...');
      await loadFallbackIcon(map);
      
      // –®–ê–ì 2: –ñ–î–ï–ú categoryMapping –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      let finalCategoryMapping = categoryMapping;
      if (Object.keys(categoryMapping).length === 0) {
        console.log('‚è≥ categoryMapping –ø—É—Å—Ç–æ–π, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏...');
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É categoryMapping
        await new Promise(resolve => setTimeout(resolve, 500));
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
        if (Object.keys(categoryMapping).length > 0) {
          finalCategoryMapping = categoryMapping;
          console.log('‚úÖ categoryMapping –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è:', Object.keys(finalCategoryMapping).length, '–∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        } else {
          console.log('‚ö†Ô∏è categoryMapping –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
          finalCategoryMapping = {};
        }
      }
      
      // –®–ê–ì 3: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥ –≥–æ—Ç–æ–≤
      if (Object.keys(finalCategoryMapping).length > 0) {
        console.log('üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        await loadAllCategoryIcons(map, finalCategoryMapping);
        setIconsLoaded(true);
        console.log('‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, finalCategoryMapping –∏–º–µ–µ—Ç', Object.keys(finalCategoryMapping).length, '–∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      } else {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ fallback –∏–∫–æ–Ω–∫—É');
      }
      
      // –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      if (!map.isStyleLoaded || !map.isStyleLoaded()) {
        console.log('‚è≥ –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª—è –∫–∞—Ä—Ç—ã...');
        return;
      }
      
      if (!map.getSource("places")) {
        // –î–æ–±–∞–≤–ª—è–µ–º GeoJSON-–∏—Å—Ç–æ—á–Ω–∏–∫ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        map.addSource("places", {
          type: "geojson",
          data: placesToGeoJSON([]), // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          cluster: true,
          clusterMaxZoom: 14,
          clusterRadius: 50,
        });
        console.log('‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö "places" –¥–æ–±–∞–≤–ª–µ–Ω');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      // –í–ê–ñ–ù–û: –ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–µ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω! –ö–ª–∞—Å—Ç–µ—Ä—ã –°–ù–ò–ó–£, –∏–∫–æ–Ω–∫–∏ –°–í–ï–†–•–£
      
      if (map.getLayer && !map.getLayer("clusters")) {
        // –°–ª–æ–π –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–í–´–ú (–Ω–∏–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
        map.addLayer({
          id: "clusters",
          type: "circle",
          source: "places",
          filter: ["has", "point_count"],
          paint: {
            "circle-color": "#5783FF",
            "circle-radius": [
              "step",
              ["get", "point_count"],
              16,
              10, 22,
              30, 28
            ],
            "circle-opacity": [
              "step",
              ["get", "point_count"],
              0.9,
              10, 0.95,
              30, 1.0
            ],
            "circle-stroke-width": 0,
            "circle-stroke-opacity": 0
          },
          layout: {
            "circle-sort-key": ["get", "point_count"]
          }
        });
        console.log('‚úÖ –°–ª–æ–π "clusters" –¥–æ–±–∞–≤–ª–µ–Ω (–Ω–∏–∂–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)');
      }

      if (map.getLayer && !map.getLayer("cluster-count")) {
        // –°–ª–æ–π —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ - –°–†–ï–î–ù–ò–ô —É—Ä–æ–≤–µ–Ω—å
        map.addLayer({
          id: "cluster-count",
          type: "symbol",
          source: "places",
          filter: ["has", "point_count"],
          layout: {
            "text-field": "{point_count_abbreviated}",
            "text-font": ["Noto Sans Bold"],
            "text-size": [
              "step",
              ["get", "point_count"],
              13,
              10, 15,
              30, 17
            ],
            "symbol-sort-key": ["literal", 1000],
            "text-allow-overlap": true,
            "text-ignore-placement": true
          },
          paint: {
            "text-color": "#ffffff",
            "text-opacity": 1.0,
            "text-halo-width": 0
          }
        });
        console.log('‚úÖ –°–ª–æ–π "cluster-count" –¥–æ–±–∞–≤–ª–µ–Ω (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)');
      }

      if (map.getLayer && !map.getLayer("unclustered-point")) {
        // –°–ª–æ–π –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏ - –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–°–õ–ï–î–ù–ò–ú (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
        map.addLayer({
          id: "unclustered-point",
          type: "symbol",
          source: "places",
          filter: ["!", ["has", "point_count"]],
          layout: {
            "icon-image": (() => {
              const expression = getCategoryIconExpression(finalCategoryMapping);
              console.log('üé® –ò—Å–ø–æ–ª—å–∑—É–µ–º icon-image expression:', expression);
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              return expression as any; // MapLibre expression typing
            })(),
            "icon-size": [
              "interpolate",
              ["linear"],
              ["zoom"],
              4, 0.4,
              10, 0.6,
              15, 0.8
            ],
            "icon-allow-overlap": false,
            "icon-ignore-placement": false,
            "symbol-sort-key": ["literal", 2000], // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–∫–æ–Ω–æ–∫
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –∏–∫–æ–Ω–∫–∞–º
            "text-field": ["get", "title"],
            "text-font": ["Noto Sans Bold"],
            "text-offset": [0, 2],
            "text-size": [
              "interpolate",
              ["linear"],
              ["zoom"],
              8, 10,
              12, 12,
              15, 14
            ],
            "text-anchor": "top",
            "text-max-width": 8,
            "text-allow-overlap": false,
            "text-ignore-placement": false
          },
          paint: {
            "icon-opacity": [
              "interpolate",
              ["linear"],
              ["zoom"],
              0, 0.9,
              22, 1
            ],
            // –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            "text-color": "#1F2937",
            "text-halo-color": "#ffffff",
            "text-halo-width": 2,
            "text-halo-blur": 1,
            "text-opacity": [
              "interpolate",
              ["linear"],
              ["zoom"],
              8, 0,
              10, 0.9,
              22, 1
            ]
          }
        });
        console.log('‚úÖ –°–ª–æ–π "unclustered-point" —Å –∏–∫–æ–Ω–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)');
      }

            // ============================================================================
      // üéØ –ë–ï–ó–û–ü–ê–°–ù–´–ô –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–û–í - –ë–ï–ó –†–ï–ö–£–†–°–ò–ò
      // ============================================================================
      
      // –§–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
      let isProcessingClick = false;
      
      map.on("click", (e) => {
        // –ó–ê–©–ò–¢–ê –û–¢ –†–ï–ö–£–†–°–ò–ò - –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if (isProcessingClick) {
          console.log('‚ö†Ô∏è –ö–ª–∏–∫ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
          return;
        }
        
        console.log('üéØ –ë–ï–ó–û–ü–ê–°–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤');
        isProcessingClick = true;
        
        try {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
          e.originalEvent.stopImmediatePropagation();
          e.originalEvent.preventDefault();
          
          // –ü–æ–ª—É—á–∞–µ–º features –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã—Ö —Å–ª–æ–µ–≤
          const clusterFeatures = map.queryRenderedFeatures(e.point, {
            layers: ["clusters"]
          });
          
          const placeFeatures = map.queryRenderedFeatures(e.point, {
            layers: ["unclustered-point"]
          });
          
          if (process.env.NODE_ENV === 'development') {
            console.log('üîç Clusters:', clusterFeatures.length, 'Places:', placeFeatures.length);
          }
          
          // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ö–ª–∞—Å—Ç–µ—Ä—ã
          if (clusterFeatures.length > 0) {
            const cluster = clusterFeatures[0];
            if (cluster.properties?.cluster === true) {
              console.log('üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ö–õ–ê–°–¢–ï–†');
              handleClusterClick(cluster);
            }
          }
          // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ú–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï–¢ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤)
          else if (placeFeatures.length > 0) {
            const place = placeFeatures[0];
            if (place.properties?.id && place.properties?.title) {
              console.log('üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ú–ï–°–¢–û');
              handlePlaceClick(place);
            }
          }
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–ª–∏–∫–æ–≤:', error);
        } finally {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            isProcessingClick = false;
          }, 100);
        }
      });

      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
      const handleClusterClick = (feature: maplibregl.MapGeoJSONFeature) => {
        console.log('üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É');
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º geometry –∫–ª–∞—Å—Ç–µ—Ä–∞
        if (!feature.geometry || feature.geometry.type !== 'Point' || !feature.geometry.coordinates) {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞:', feature.geometry);
          return;
        }
        
        const coords = feature.geometry.coordinates;
        if (!Array.isArray(coords) || coords.length !== 2 || 
            typeof coords[0] !== 'number' || typeof coords[1] !== 'number' ||
            isNaN(coords[0]) || isNaN(coords[1])) {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∞:', coords);
          return;
        }
        
        const clusterId = feature.properties?.cluster_id;
        if (!clusterId && clusterId !== 0) {
          console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç cluster_id:', feature.properties);
          return;
        }

        const currentMap = mapInstanceRef.current;
        if (!currentMap || !currentMap.getSource || typeof currentMap.getSource !== 'function') {
          console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É');
          return;
        }
        
        try {
          const source = currentMap.getSource("places") as maplibregl.GeoJSONSource;
          if (source && source.getClusterExpansionZoom && typeof source.getClusterExpansionZoom === 'function') {
            source.getClusterExpansionZoom(clusterId).then(zoom => {
              // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑—É–º
              if (typeof zoom !== 'number' || isNaN(zoom) || zoom < 4 || zoom > 18) {
                console.error('‚ùå getClusterExpansionZoom –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑—É–º:', zoom, '–¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞:', clusterId);
                return;
              }
              
              setTimeout(() => {
                const finalMap = mapInstanceRef.current;
                if (finalMap && finalMap.easeTo && finalMap.getCanvas && finalMap.isStyleLoaded()) {
                  try {
                    const canvas = finalMap.getCanvas();
                    if (!canvas || canvas.clientWidth === 0 || canvas.clientHeight === 0) {
                      console.warn('‚ö†Ô∏è Canvas –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞');
                      return;
                    }
                    
                    const currentZoom = finalMap.getZoom();
                    if (isNaN(currentZoom)) {
                      console.error('‚ùå –¢–µ–∫—É—â–∏–π –∑—É–º –∫–∞—Ä—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:', currentZoom);
                      return;
                    }
                    
                    const centerCoords = coords as [number, number];
                    if (centerCoords[0] < -180 || centerCoords[0] > 180 || 
                        centerCoords[1] < -90 || centerCoords[1] > 90) {
                      console.error('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∞—Å—Ç–µ—Ä–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', centerCoords);
                      return;
                    }
                    
                    finalMap.easeTo({
                      center: centerCoords,
                      zoom: zoom,
                      duration: 500
                    });
                  } catch (animationError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞:', animationError);
                  }
                }
              }, 100);
            }).catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞:', error);
            });
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É:', error);
        }
      };

      // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ –º–µ—Å—Ç–∞–º
      const handlePlaceClick = (feature: maplibregl.MapGeoJSONFeature) => {
        console.log('üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ –º–µ—Å—Ç—É');
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º geometry –º–∞—Ä–∫–µ—Ä–∞
        if (!feature.geometry || feature.geometry.type !== 'Point' || !feature.geometry.coordinates) {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –º–∞—Ä–∫–µ—Ä–∞:', feature.geometry);
          return;
        }
        
        const coords = feature.geometry.coordinates;
        if (!Array.isArray(coords) || coords.length !== 2 || 
            typeof coords[0] !== 'number' || typeof coords[1] !== 'number' ||
            isNaN(coords[0]) || isNaN(coords[1])) {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–∞:', coords);
          return;
        }
        
        if (coords[0] < -180 || coords[0] > 180 || coords[1] < -90 || coords[1] > 90) {
          console.error('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', coords);
          return;
        }

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º properties –º–µ—Å—Ç–∞
        const clickedPlace = feature.properties as Place;
        if (!clickedPlace || !clickedPlace.id) {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ properties –º–µ—Å—Ç–∞:', clickedPlace);
          debugPlaceData(clickedPlace, '–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–ª–∏–∫–∞');
          return;
        }

        if (process.env.NODE_ENV === 'development') {
          debugPlaceData(clickedPlace, '–ö–ª–∏–∫ –ø–æ –º–∞—Ä–∫–µ—Ä—É');
        }

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç—Ç–æ–º-—à–∏—Ç–∞
        onPlaceSelect(clickedPlace);
        
        const clickedLngLat = coords as [number, number];

        setTimeout(() => {
          const currentMap = mapInstanceRef.current;
          if (currentMap && currentMap.getCanvas && currentMap.panTo && currentMap.isStyleLoaded()) {
            try {
              const canvas = currentMap.getCanvas();
              if (!canvas || canvas.clientWidth === 0 || canvas.clientHeight === 0) {
                console.warn('‚ö†Ô∏è Canvas –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏');
                return;
              }
              
              const currentZoom = currentMap.getZoom();
              const currentCenter = currentMap.getCenter();
              if (isNaN(currentZoom) || !currentCenter || 
                  isNaN(currentCenter.lng) || isNaN(currentCenter.lat)) {
                console.error('‚ùå –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', { currentZoom, currentCenter });
                return;
              }
              
              const mapContainerHeight = canvas.clientHeight;
              if (mapContainerHeight <= 0) {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã');
                return;
              }
              
              const offsetPixels = -mapContainerHeight * 0.3;
              currentMap.panTo(clickedLngLat, { offset: [0, offsetPixels], duration: 500 });
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∫ –ø–∏–Ω—É:', error);
            }
          }
        }, 50);
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä-–ø–∞–ª–µ—Ü –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å–ª–æ–∏ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
      ['unclustered-point', 'cluster-count', 'clusters'].forEach(layerId => {
        map.on("mouseenter", layerId, () => { 
          const canvas = map.getCanvas();
          if (canvas) canvas.style.cursor = "pointer"; 
        });
        map.on("mouseleave", layerId, () => { 
          const canvas = map.getCanvas();
          if (canvas) canvas.style.cursor = ""; 
        });
      });

      // –û—Ç–ª–∞–¥–∫–∞ —Å–ª–æ–µ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
      setTimeout(() => {
        if (map.isStyleLoaded()) {
          console.log('üîç –û–¢–õ–ê–î–ö–ê –°–õ–û–ï–í:');
          console.log('üìä –ò—Å—Ç–æ—á–Ω–∏–∫ places:', map.getSource('places'));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          const loadedImages = Object.keys((map as any).style.imageManager.images || {});
          console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', loadedImages.filter(img => img.startsWith('category')));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–ª–æ–µ–≤
          ['unclustered-point', 'clusters', 'cluster-count'].forEach(layerId => {
            const layer = map.getLayer(layerId);
            if (layer) {
              console.log(`üé® –°–ª–æ–π ${layerId}:`, {
                type: layer.type,
                visibility: map.getLayoutProperty(layerId, 'visibility'),
                iconImage: layerId === 'unclustered-point' ? map.getLayoutProperty(layerId, 'icon-image') : 'N/A'
              });
            }
          });
        }
      }, 1000);

      // –ö–∞—Ä—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
      console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
      setMapReady(true);
    });

    map.addControl(new maplibregl.NavigationControl(), "bottom-right");

    // –î–æ–±–∞–≤–ª—è–µ–º MapLibre Inspector —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (process.env.NODE_ENV === "development") {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      setTimeout(() => {
        const currentMap = mapInstanceRef.current;
        if (currentMap && currentMap.isStyleLoaded && currentMap.isStyleLoaded()) {
          try {
            currentMap.addControl(
              new MaplibreInspect({
                popup: new maplibregl.Popup({
                  closeButton: false,
                  closeOnClick: false
                }),
                showInspectButton: true,
                showInspectMap: false,
                showMapPopup: true,
                showMapPopupOnHover: true,
                showInspectMapPopupOnHover: true
              }),
              "top-right"
            );
            console.log('üîß MapLibre Inspector –¥–æ–±–∞–≤–ª–µ–Ω');
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å MapLibre Inspector:', error);
          }
        }
      }, 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    }

    return () => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      if (filterTimeoutRef.current) {
        clearTimeout(filterTimeoutRef.current);
        filterTimeoutRef.current = null;
      }
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      if (sourceUpdateTimeoutRef.current) {
        clearTimeout(sourceUpdateTimeoutRef.current);
        sourceUpdateTimeoutRef.current = null;
      }
      
      const mapInstance = mapInstanceRef.current;
      if (mapInstance) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
          if (mapInstance.getCanvas && mapInstance.getCanvas()) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
            saveCurrentState();
          }
          
          // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
          if (mapInstance.off) {
            mapInstance.off('moveend', debouncedSave);
            mapInstance.off('zoomend', debouncedSave);
            mapInstance.off("styleimagemissing", handleStyleImageMissing);
          }
          
          // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É
          if (mapInstance.remove) {
            mapInstance.remove();
          }
          mapInstanceRef.current = null;
          
          // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
          clearTimeout(saveTimeout);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ä—Ç—ã:', error);
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          mapInstanceRef.current = null;
        }
      }
    };
  }, [onPlaceSelect, categoryMapping, handleStyleImageMissing]); // onPlaceSelect –∏ categoryMapping –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

  return <div 
    ref={mapRef} 
    className="h-[100vh] w-full map-no-flicker" 
    style={{
      transition: 'opacity 0.15s ease-in-out',
      minHeight: '200px', // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
      minWidth: '200px'   // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    }} 
  />;
} 