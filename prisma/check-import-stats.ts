import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkImportStats() {
	console.log('üìä –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n')
	
	try {
		// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		const totalPlaces = await prisma.place.count()
		console.log(`üèõÔ∏è  –í—Å–µ–≥–æ –º–µ—Å—Ç –≤ –ë–î: ${totalPlaces}`)
		
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
		console.log('\nüìÇ –¢–æ–ø-10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
		const categoryStats = await prisma.place.groupBy({
			by: ['categoryName'],
			_count: { id: true },
			orderBy: { _count: { id: 'desc' } },
			take: 10
		})
		
		categoryStats.forEach((stat, index) => {
			console.log(`${index + 1}. ${stat.categoryName}: ${stat._count.id} –º–µ—Å—Ç`)
		})
		
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
		console.log('\nüèôÔ∏è  –¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤:')
		const cityStats = await prisma.place.groupBy({
			by: ['city'],
			where: { city: { not: null } },
			_count: { id: true },
			orderBy: { _count: { id: 'desc' } },
			take: 10
		})
		
		cityStats.forEach((stat, index) => {
			console.log(`${index + 1}. ${stat.city}: ${stat._count.id} –º–µ—Å—Ç`)
		})
		
		// –ú–µ—Å—Ç–∞ –±–µ–∑ –≥–æ—Ä–æ–¥–∞
		const noCity = await prisma.place.count({
			where: { city: null }
		})
		console.log(`\nüåç –ú–µ—Å—Ç –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞: ${noCity}`)
		
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é (state)
		console.log('\nüìç –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º:')
		const stateStats = await prisma.place.groupBy({
			by: ['state'],
			_count: { id: true },
			orderBy: { _count: { id: 'desc' } }
		})
		
		stateStats.forEach((stat, index) => {
			console.log(`${index + 1}. ${stat.state}: ${stat._count.id} –º–µ—Å—Ç`)
		})
		
		// –ú–µ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
		const withImages = await prisma.place.count({
			where: { imageUrl: { not: null } }
		})
		console.log(`\nüñºÔ∏è  –ú–µ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages} (${((withImages / totalPlaces) * 100).toFixed(1)}%)`)
		
		// –ú–µ—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
		const withDescription = await prisma.place.count({
			where: { description: { not: null } }
		})
		console.log(`üìù –ú–µ—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: ${withDescription} (${((withDescription / totalPlaces) * 100).toFixed(1)}%)`)
		
		// –ú–µ—Å—Ç–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
		const withRating = await prisma.place.count({
			where: { totalScore: { not: null } }
		})
		console.log(`‚≠ê –ú–µ—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º: ${withRating} (${((withRating / totalPlaces) * 100).toFixed(1)}%)`)
		
		// –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –º–µ—Å—Ç–∞
		const temporarilyClosed = await prisma.place.count({
			where: { temporarilyClosed: true }
		})
		console.log(`üö´ –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –º–µ—Å—Ç: ${temporarilyClosed}`)
		
		// –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
		console.log('\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç:')
		const recentPlaces = await prisma.place.findMany({
			take: 5,
			orderBy: { createdAt: 'desc' },
			select: {
				title: true,
				city: true,
				categoryName: true,
				createdAt: true
			}
		})
		
		recentPlaces.forEach((place, index) => {
			const date = place.createdAt.toLocaleDateString('ru-RU')
			const time = place.createdAt.toLocaleTimeString('ru-RU')
			console.log(`${index + 1}. "${place.title}" (${place.city || '–±–µ–∑ –≥–æ—Ä–æ–¥–∞'}) - ${place.categoryName} [${date} ${time}]`)
		})
		
		// –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±—Ä–æ—Å
		console.log('\nüó∫Ô∏è  –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±—Ä–æ—Å:')
		const geoStats = await prisma.place.aggregate({
			_min: { lat: true, lng: true },
			_max: { lat: true, lng: true },
			_avg: { lat: true, lng: true }
		})
		
		console.log(`   –®–∏—Ä–æ—Ç–∞: ${geoStats._min.lat?.toFixed(4)} ‚Äî ${geoStats._max.lat?.toFixed(4)} (—Ü–µ–Ω—Ç—Ä: ${geoStats._avg.lat?.toFixed(4)})`)
		console.log(`   –î–æ–ª–≥–æ—Ç–∞: ${geoStats._min.lng?.toFixed(4)} ‚Äî ${geoStats._max.lng?.toFixed(4)} (—Ü–µ–Ω—Ç—Ä: ${geoStats._avg.lng?.toFixed(4)})`)
		
		console.log('\n‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
		
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
		throw error
	}
}

async function main() {
	try {
		await checkImportStats()
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error)
		process.exit(1)
	} finally {
		await prisma.$disconnect()
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
	main()
}

export { checkImportStats } 