import { PrismaClient } from '@prisma/client'
import fs from 'fs/promises'
import path from 'path'

const prisma = new PrismaClient()

interface TransformedPlace {
	title: string
	city: string | null
	totalScore: number | null
	location: {
		lat: number
		lng: number
	}
	categoryName: string
	street: string | null
	state: string
	reviewsCount: number | null
	imageUrl: string | null
	price: string | null
	description?: string | null
	address: string
	categories: string[]
	temporarilyClosed: boolean
	website?: string
}

async function resetAndImportPlaces() {
	console.log('üî• –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ò–ú–ü–û–†–¢ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ù–´–• –ú–ï–°–¢')
	console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Å—Ç–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n')
	
	try {
		// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
		const filePath = path.join(process.cwd(), 'public', 'transformed_places.json')
		const fileContent = await fs.readFile(filePath, 'utf8')
		const transformedPlaces: TransformedPlace[] = JSON.parse(fileContent)
		
		console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${transformedPlaces.length} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`)
		
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ –ë–î
		const existingCount = await prisma.place.count()
		console.log(`üìà –¢–µ–∫—É—â–∏—Ö –º–µ—Å—Ç –≤ –ë–î: ${existingCount}`)
		
		// –®–ê–ì 1: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã places
		console.log('\nüóëÔ∏è  –®–ê–ì 1: –û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É places...')
		await prisma.place.deleteMany({})
		
		const afterDeleteCount = await prisma.place.count()
		console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${existingCount} –º–µ—Å—Ç. –û—Å—Ç–∞–ª–æ—Å—å: ${afterDeleteCount}`)
		
		// –®–ê–ì 2: –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
		console.log('\nüì• –®–ê–ì 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –≤—Å–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞...')
		
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
		const categoryStats = new Map<string, number>()
		const subcategoryStats = new Map<string, number>()
		
		for (const place of transformedPlaces) {
			categoryStats.set(place.categoryName, (categoryStats.get(place.categoryName) || 0) + 1)
			for (const subcategory of place.categories) {
				subcategoryStats.set(subcategory, (subcategoryStats.get(subcategory) || 0) + 1)
			}
		}
		
		console.log(`\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:`)
		Array.from(categoryStats.entries())
			.sort((a, b) => b[1] - a[1])
			.slice(0, 10)
			.forEach(([category, count]) => {
				console.log(`   ‚Ä¢ ${category}: ${count} –º–µ—Å—Ç`)
			})
		
		// –ë–∞—Ç—á–µ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
		const batchSize = 500
		let importedCount = 0
		let failedCount = 0
		
		for (let i = 0; i < transformedPlaces.length; i += batchSize) {
			const batch = transformedPlaces.slice(i, i + batchSize)
			
			console.log(`‚è≥ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –±–∞—Ç—á ${Math.floor(i / batchSize) + 1}/${Math.ceil(transformedPlaces.length / batchSize)} (${batch.length} –º–µ—Å—Ç)...`)
			
			try {
				// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è createMany
				const placesToCreate = batch.map(place => ({
					title: place.title,
					city: place.city,
					totalScore: place.totalScore,
					lat: place.location.lat,
					lng: place.location.lng,
					categoryName: place.categoryName,
					street: place.street,
					state: place.state || '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π',
					reviewsCount: place.reviewsCount,
					imageUrl: place.imageUrl,
					price: place.price,
					description: place.description,
					address: place.address,
					categories: place.categories,
					temporarilyClosed: place.temporarilyClosed || false
				}))
				
				// Bulk —Å–æ–∑–¥–∞–Ω–∏–µ
				const result = await prisma.place.createMany({
					data: placesToCreate,
					skipDuplicates: false // –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ –ë–î –ø—É—Å—Ç–∞—è
				})
				
				importedCount += result.count
				
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
				const progress = (((i + batch.length) / transformedPlaces.length) * 100).toFixed(1)
				console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% | –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –±–∞—Ç—á–µ: ${result.count}`)
				
			} catch (error) {
				console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±–∞—Ç—á–∞:`, error)
				
				// Fallback: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É –º–µ—Å—Ç—É –∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –±–∞—Ç—á–∞
				console.log('üîÑ –ü—Ä–æ–±—É—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É...')
				for (const place of batch) {
					try {
						await prisma.place.create({
							data: {
								title: place.title,
								city: place.city,
								totalScore: place.totalScore,
								lat: place.location.lat,
								lng: place.location.lng,
								categoryName: place.categoryName,
								street: place.street,
								state: place.state || '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π',
								reviewsCount: place.reviewsCount,
								imageUrl: place.imageUrl,
								price: place.price,
								description: place.description,
								address: place.address,
								categories: place.categories,
								temporarilyClosed: place.temporarilyClosed || false
							}
						})
						importedCount++
					} catch (singleError) {
						failedCount++
						console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ "${place.title}":`, singleError)
					}
				}
			}
		}
		
		// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		const finalCount = await prisma.place.count()
		const finalCategoryStats = await prisma.place.groupBy({
			by: ['categoryName'],
			_count: { id: true },
			orderBy: { _count: { id: 'desc' } }
		})
		
		console.log(`
üéâ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!
üìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –º–µ—Å—Ç: ${existingCount}
   ‚Ä¢ –ú–µ—Å—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${transformedPlaces.length}
   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount}
   ‚Ä¢ –û—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞: ${failedCount}
   ‚Ä¢ –ò—Ç–æ–≥–æ –º–µ—Å—Ç –≤ –ë–î: ${finalCount}
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryStats.size}
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${subcategoryStats.size}

üìÇ –ò—Ç–æ–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î:`)
		
		finalCategoryStats.slice(0, 12).forEach((stat, index) => {
			console.log(`${index + 1}. ${stat.categoryName}: ${stat._count.id} –º–µ—Å—Ç`)
		})
		
		console.log(`\n‚ú® –í—Å–µ –º–µ—Å—Ç–∞ —Ç–µ–ø–µ—Ä—å –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞!`)
		
	} catch (error) {
		console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–µ:', error)
		throw error
	}
}

async function main() {
	try {
		await resetAndImportPlaces()
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error)
		process.exit(1)
	} finally {
		await prisma.$disconnect()
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
	main()
}

export { resetAndImportPlaces } 